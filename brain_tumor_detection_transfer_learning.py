# -*- coding: utf-8 -*-
"""Brain Tumor Detection- Transfer learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-8HtIcic8UAzM-IbWTBg3y1nuhIDw8_L
"""

import warnings
warnings.filterwarnings('ignore')

#get the data from
!wget https://www.dropbox.com/scl/fi/wzy3syorl7cdkbl9dvt2w/archive.zip?rlkey=igq81bgfgo2uagkpvl6rr2duw&st=eeoxypvx&dl=0

!unzip /content/archive.zip?rlkey=igq81bgfgo2uagkpvl6rr2duw

import numpy as np
import matplotlib.pyplot as plt
import os
import math
import shutil
import glob

TRAIN_DIR = "/content/Training"
number_of_images = {}

for dir in os.listdir(TRAIN_DIR):
  number_of_images[dir]= len(os.listdir(os.path.join(TRAIN_DIR,dir)))
number_of_images.items()

TEST_DIR = "/content/Testing"
number_of_images = {}

for dir in os.listdir(TEST_DIR):
  number_of_images[dir]= len(os.listdir(os.path.join(TEST_DIR,dir)))
number_of_images.items()

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.applications.mobilenet import MobileNet, preprocess_input
def preprocessingimages(path):


  #image_data = ImageDataGenerator(zoom_range = 0.2, shear_range = 0.2, rescale=1./255, horizontal_flip=True)
  #For a more generalized data set
  image_data = ImageDataGenerator(preprocessing_function= preprocess_input)
  image = image_data.flow_from_directory(directory= path, target_size=(512,512), batch_size=32, class_mode= 'categorical',color_mode='grayscale')
  return image

path='/content/Training'
train_data = preprocessingimages(path)

path='/content/Testing'
test_data = preprocessingimages(path)

"""Model Training using transfer learning"""

import numpy as np
import matplotlib.pyplot as plt
from keras.layers import Flatten, Dense
from keras.models import Model, load_model
import keras
from tensorflow.keras.layers import InputLayer
import tensorflow as tf

from keras.preprocessing.image import load_img, img_to_array
def convert_grayscale_to_rgb(image):
    return np.stack((image,) * 3, axis=-1)

# ImageDataGenerator with preprocessing function to convert grayscale to RGB
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

# Load your train and test data
train_data = train_datagen.flow_from_directory(
    '/content/Training',
    target_size=(512, 512),
    batch_size=32,
    color_mode='rgb',
    class_mode='categorical'
)

test_data = test_datagen.flow_from_directory(
    '/content/Testing',
    target_size=(512, 512),
    batch_size=32,
    color_mode='rgb',
    class_mode='categorical'
)

# Create MobileNet model with the correct input shape
base_model = MobileNet(input_shape=(512, 512, 3), include_top=False)

for layer in base_model.layers:
  layer.trainable = False

X= Flatten()(base_model.output)
X= Dense (units= 4, activation='softmax')(X)

model= Model(base_model.input,X)

#base_model.summary()

model.summary()

model.compile(optimizer='adam',loss= keras.losses.categorical_crossentropy,metrics=['accuracy'])

from keras.callbacks import ModelCheckpoint, EarlyStopping

mc= ModelCheckpoint(filepath='bestmodel.keras', monitor='val_accuracy', save_best_only=True)
es= EarlyStopping( monitor='val_accuracy', min_delta=0.01,patience= 3, verbose=1)
cb= [mc,es]

hist= model.fit(train_data, steps_per_epoch=10,
                epochs= 30, validation_data= test_data, callbacks=cb)

"""Load best fit model"""

model = load_model("/content/bestmodel.keras")

acc = model.evaluate(test_data)[1]
print(f"Model accuracy is {acc*100}%")

hist.history.keys()

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'], c = "red")
plt.title("model accuracy")
plt.ylabel("acc")
plt.xlabel("epochs")

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'], c = "red")
plt.title("model loss")
plt.ylabel("loss")
plt.xlabel("epochs")

from tensorflow.keras.preprocessing import image
import numpy as np

path = "/content/Testing/pituitary/Te-piTr_0002.jpg"
img = image.load_img(path, target_size=(512,512))
i = image.img_to_array(img)/255
im = preprocess_input(i)

input_arr = np.array([im])
input_arr.shape
pred = np.argmax(model.predict(input_arr))

class_names = ['glioma', 'meningioma', 'no tumor', 'pituitary']

# @title
plt.figure(figsize=(6, 6))
plt.imshow(img)
plt.title(f"Predicted Class: {class_names[pred]}")
plt.axis('off')  # Hide axes
plt.show()